name: Release DeepLabCut

on:
  push:
    tags: ['deeplabcut-v*']
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: dlc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, Windows, X64, GPU]
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag (cmd)
        shell: cmd
        run: |
          set VERSION=%GITHUB_REF_NAME:deeplabcut-v=%
          echo VERSION=%VERSION%>> %GITHUB_ENV%

      - name: Create venv
        shell: cmd
        run: |
          C:\Python310\python.exe -V
          C:\Python310\python.exe -m venv venv

      - name: Install deps
        shell: cmd
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\pip install h5py pyinstaller deeplabcut==3.0.0rc8
          venv\Scripts\pip install --upgrade --index-url https://download.pytorch.org/whl/cu126 torch
          venv\Scripts\python -c "import torch;print('Torch:',torch.__version__);print('CUDA build:',getattr(torch.version,'cuda',None));print('CUDA available:',torch.cuda.is_available())"

      - name: Clean old dist/build
        shell: cmd
        working-directory: Deploy
        run: |
          if exist dist rmdir /s /q dist
          if exist build rmdir /s /q build

      - name: Build deeplabcut
        shell: cmd
        working-directory: Deploy
        run: |
          ..\venv\Scripts\pyinstaller --clean --noconfirm pack_deeplabcut_run.spec
          echo === DIST TREE ===
          dir /s /b dist

      - name: Zip onedir output with build-info
        shell: cmd
        working-directory: Deploy
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          rem Locate the onedir app folder under dist
          set "APPDIR="
          for /d %%D in (dist\*) do (
            set "APPDIR=%%D"
            goto :found
          )
          :found
          if not defined APPDIR (
            echo ERROR: no onedir folder found in Deploy\dist
            exit /b 1
          )

          rem Write build-info into the app folder (included in the zip)
          echo Version: %VERSION%> "%APPDIR%\build-info.txt"
          echo Commit: %GIT_SHA%>> "%APPDIR%\build-info.txt"
          echo Date: %DATE% %TIME%>> "%APPDIR%\build-info.txt"

          set "ZIPNAME=deeplabcut-%VERSION%.zip"
          set "PYZ=%TEMP%\zipit_%RANDOM%.py"

          > "%PYZ%" echo import os, sys, zipfile
          >>"%PYZ%" echo appdir = r"%APPDIR%"
          >>"%PYZ%" echo zipname = r"%ZIPNAME%"
          >>"%PYZ%" echo
          >>"%PYZ%" echo if not os.path.isdir(appdir):
          >>"%PYZ%" echo^    print("ERROR: APPDIR not found:", appdir); sys.exit(1)
          >>"%PYZ%" echo with zipfile.ZipFile(zipname, "w", compression=zipfile.ZIP_DEFLATED) as z:
          >>"%PYZ%" echo^    for root, _, files in os.walk(appdir):
          >>"%PYZ%" echo^        for f in files:
          >>"%PYZ%" echo^            p = os.path.join(root, f)
          >>"%PYZ%" echo^            rel = os.path.relpath(p, appdir)
          >>"%PYZ%" echo^            z.write(p, rel)

          ..\venv\Scripts\python "%PYZ%"
          del "%PYZ%"
          echo Created zip: %ZIPNAME%
          
      - name: Show zip contents
        shell: cmd
        working-directory: Deploy
        run: |
          set "ZN=deeplabcut-%VERSION%.zip"
          if not exist "%ZN%" (echo ERROR: zip not found & exit /b 1)

          set "PYL=%TEMP%\listzip_%RANDOM%.py"
          > "%PYL%" echo import zipfile
          >>"%PYL%" echo z=zipfile.ZipFile(r"%ZN%","r")
          >>"%PYL%" echo names=z.namelist()
          >>"%PYL%" echo print("Entries in %ZN%:", len(names))
          >>"%PYL%" echo [print("  ",n) for n in names[:50]]
          >>"%PYL%" echo z.close()

          ..\venv\Scripts\python "%PYL%"
          del "%PYL%"

      - name: SHA256 of release zip
        shell: cmd
        working-directory: Deploy
        run: |
          setlocal EnableDelayedExpansion
          set ZIP=deeplabcut-%VERSION%.zip
          for /f "usebackq skip=1 tokens=1" %%H in (`certutil -hashfile "%ZIP%" SHA256 ^| findstr /v /i "hash certutil"`) do (
            set HASH=%%H
            goto :got
          )
          :got
          echo !HASH!> deeplabcut-%VERSION%.zip.sha256
          type deeplabcut-%VERSION%.zip.sha256

      - name: Create GitHub Release (attach zip + checksum)
        uses: softprops/action-gh-release@v2
        with:
          name: deeplabcut ${{ env.VERSION }}
          body: |
            Automated deeplabcut release for tag ${{ github.ref_name }}.
            - Version: ${{ env.VERSION }}
            - Commit: ${{ github.sha }}
          files: |
            Deploy/deeplabcut-${{ env.VERSION }}.zip
            Deploy/deeplabcut-${{ env.VERSION }}.zip.sha256

      - name: Upload dist artifact (only on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: deeplabcut-dist-${{ env.VERSION }}
          path: Deploy/dist/**
          retention-days: 3
          compression-level: 1
