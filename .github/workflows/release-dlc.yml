name: Release DeepLabCut

on:
  push:
    tags: ['deeplabcut-v*']
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: dlc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, Windows, X64, GPU]
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag (cmd)
        shell: cmd
        run: |
          set VERSION=%GITHUB_REF_NAME:deeplabcut-v=%
          echo VERSION=%VERSION%>> %GITHUB_ENV%

      # System Python 3.10 at C:\Python310 (no conda, no setup actions)
      - name: Create venv (cmd)
        shell: cmd
        run: |
          C:\Python310\python.exe -V
          C:\Python310\python.exe -m venv venv

      - name: Install deps (cmd)
        shell: cmd
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\pip install h5py pyinstaller deeplabcut==3.0.0rc8
          venv\Scripts\pip install --upgrade --index-url https://download.pytorch.org/whl/cu126 torch torchvision
          venv\Scripts\python -c "import torch;print('Torch:',torch.__version__);print('CUDA build:',getattr(torch.version,'cuda',None));print('CUDA available:',torch.cuda.is_available())"

      - name: Clean old dist/build (cmd)
        shell: cmd
        working-directory: Deploy
        run: |
          if exist dist rmdir /s /q dist
          if exist build rmdir /s /q build

      - name: Build deeplabcut (cmd)
        shell: cmd
        working-directory: Deploy
        run: |
          ..\venv\Scripts\pyinstaller --clean --noconfirm pack_deeplabcut_run.spec
          echo === DIST TREE ===
          dir /s /b dist

      # Zip using Python zipfile to avoid Windows tar quirks
      - name: Zip onedir output with build-info (cmd)
        shell: cmd
        working-directory: Deploy
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          rem Locate the onedir app folder under dist
          set "APPDIR="
          for /d %%D in (dist\*) do (
            set "APPDIR=%%D"
            goto :found
          )
          :found
          if not defined APPDIR (
            echo ERROR: no onedir folder found in Deploy\dist
            exit /b 1
          )

          rem Write build-info into the app folder (included in the zip)
          echo Version: %VERSION%> "%APPDIR%\build-info.txt"
          echo Commit: %GIT_SHA%>> "%APPDIR%\build-info.txt"
          echo Date: %DATE% %TIME%>> "%APPDIR%\build-info.txt"

          set "ZIPNAME=deeplabcut-%VERSION%.zip"
          ..\venv\Scripts\python - <<PY
          import os, sys, zipfile
          appdir = os.environ.get("APPDIR")
          zipname = os.environ.get("ZIPNAME")
          if not appdir or not os.path.isdir(appdir):
              print("ERROR: APPDIR not found:", appdir)
              sys.exit(1)
          with zipfile.ZipFile(zipname, "w", compression=zipfile.ZIP_DEFLATED) as z:
              for root, _, files in os.walk(appdir):
                  for f in files:
                      p = os.path.join(root, f)
                      rel = os.path.relpath(p, appdir)
                      z.write(p, rel)
          print("Created zip:", zipname)
          PY

      - name: Show zip contents (cmd)
        shell: cmd
        working-directory: Deploy
        run: |
          ..\venv\Scripts\python - <<PY
          import os, zipfile
          zn = f"deeplabcut-{os.environ['VERSION']}.zip"
          with zipfile.ZipFile(zn, "r") as z:
              names = z.namelist()
          print(f"Entries in {zn}: {len(names)}")
          for n in names[:50]:
              print("  ", n)
          if len(names) > 50:
              print("  ...")
          PY

      - name: SHA256 of release zip (cmd)
        shell: cmd
        working-directory: Deploy
        run: |
          setlocal EnableDelayedExpansion
          set ZIP=deeplabcut-%VERSION%.zip
          for /f "usebackq skip=1 tokens=1" %%H in (`certutil -hashfile "%ZIP%" SHA256 ^| findstr /v /i "hash certutil"`) do (
            set HASH=%%H
            goto :got
          )
          :got
          echo !HASH!> deeplabcut-%VERSION%.zip.sha256
          type deeplabcut-%VERSION%.zip.sha256

      - name: Create GitHub Release (attach zip + checksum)
        uses: softprops/action-gh-release@v2
        with:
          name: deeplabcut ${{ env.VERSION }}
          body: |
            Automated deeplabcut release for tag ${{ github.ref_name }}.
            - Version: ${{ env.VERSION }}
            - Commit: ${{ github.sha }}
          files: |
            Deploy/deeplabcut-${{ env.VERSION }}.zip
            Deploy/deeplabcut-${{ env.VERSION }}.zip.sha256

      # Map the share with credentials, copy the zip, then unmap
      - name: Copy release zip to server (cmd) with auth
        shell: cmd
        working-directory: Deploy
        env:
          NAS_USER: ${{ secrets.NAS_USER }}   # e.g. YOURDOMAIN\buildbot
          NAS_PASS: ${{ secrets.NAS_PASS }}
          BACKUP_SHARE: \\SRV2019-AD\Labo
          BACKUP_SUBPATH: Internal Software\danse\Libraries\DeepLabCut
        run: |
          setlocal EnableDelayedExpansion
          set "ZIPNAME=deeplabcut-%VERSION%.zip"
          set "ZIPPATH=%CD%\%ZIPNAME%"

          if not exist "%ZIPPATH%" (
            echo ERROR: Release zip not found: "%ZIPPATH%"
            exit /b 1
          )

          rem connect share to Z: (choose a free letter)
          net use Z: "%BACKUP_SHARE%" /user:%NAS_USER% %NAS_PASS% /persistent:no >nul
          if errorlevel 1 (
            echo ERROR: could not authenticate to "%BACKUP_SHARE%"
            exit /b 1
          )

          if not exist "Z:\%BACKUP_SUBPATH%" mkdir "Z:\%BACKUP_SUBPATH%"

          echo Copying "%ZIPPATH%" to "Z:\%BACKUP_SUBPATH%\%ZIPNAME%"
          copy /Y "%ZIPPATH%" "Z:\%BACKUP_SUBPATH%\%ZIPNAME%" >nul
          if errorlevel 1 (
            echo ERROR: copy failed
            net use Z: /delete >nul
            exit /b 1
          )
          echo Backup zip is at: \\SRV2019-AD\Labo\%BACKUP_SUBPATH%\%ZIPNAME%

          rem verify server zip is non-empty
          ..\venv\Scripts\python - <<PY
          import os, zipfile
          zn = r"Z:\%BACKUP_SUBPATH%\%ZIPNAME%".replace('/', '\\')
          with zipfile.ZipFile(zn, "r") as z:
              names = z.namelist()
          print("Server zip entries:", len(names))
          print("First few:", names[:10])
          if not names:
              raise SystemExit("ERROR: server zip appears empty")
          PY

          rem disconnect mapping
          net use Z: /delete >nul

      # Upload heavy dist only if something failed (short retention)
      - name: Upload dist artifact (only on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: deeplabcut-dist-${{ env.VERSION }}
          path: Deploy/dist/**
          retention-days: 3
          compression-level: 0
