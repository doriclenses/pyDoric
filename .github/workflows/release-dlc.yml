name: Release DeepLabCut

on:
  push:
    tags: ['deeplabcut-v*']
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: dlc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, Windows, X64, GPU]
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag (cmd)
        shell: cmd
        run: |
          set VERSION=%GITHUB_REF_NAME:deeplabcut-v=%
          echo VERSION=%VERSION%>> %GITHUB_ENV%

      - name: Define Python path (cmd)
        shell: cmd
        run: |
          set PYTHON_EXE=C:\Python310\python.exe
          echo PYTHON_EXE=%PYTHON_EXE%>> %GITHUB_ENV%

      - name: Create venv (cmd)
        shell: cmd
        run: |
          "%PYTHON_EXE%" -V
          "%PYTHON_EXE%" -m venv venv

      - name: Install deps (cmd)
        shell: cmd
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\pip install -r DeepLabCut\requirements.txt
          venv\Scripts\pip install pyinstaller
          rem Ensure CUDA wheel of torch (adjust cu version if needed)
          venv\Scripts\pip install --upgrade --index-url https://download.pytorch.org/whl/cu126 torch torchvision
          venv\Scripts\python -c "import torch;print('Torch:',torch.__version__);import sys;print('CUDA build:',getattr(torch.version,'cuda',None));print('CUDA available at runtime:',torch.cuda.is_available())"

      - name: Build DeepLabCut exe (cmd)
        shell: cmd
        working-directory: Deploy
        run: |
          ..\venv\Scripts\pyinstaller --clean --noconfirm pack_deeplabcut_run.spec

          echo === DIST TREE ===
          dir /s /b dist

          rem Case A: one-file build -> dist\*.exe
          for %%F in (dist\*.exe) do (
            echo Found onefile exe: %%F
            tar -a -c -f deeplabcut-%VERSION%.zip -C dist "%%~nxF"
            goto :zipped
          )

          rem Case B: one-folder build -> dist\<appname>\*
          for /d %%D in (dist\*) do (
            echo Found onefolder dir: %%D
            tar -a -c -f deeplabcut-%VERSION%.zip -C "%%D" .
            goto :zipped
          )

          echo ERROR: Nothing found in Deploy\dist to zip
          exit /b 1

          :zipped
          echo Created zip: deeplabcut-%VERSION%.zip

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: deeplabcut-dist-%{{ env.VERSION }}
          path: Deploy/dist/**
