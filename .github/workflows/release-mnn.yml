name: Release MiniAn

on:
  push:
    tags: ['minian-v*']
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: mnn-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, Windows, X64, GPU]
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        shell: cmd
        run: |
          set VERSION=%GITHUB_REF_NAME:minian-v=%
          echo VERSION=%VERSION%>> %GITHUB_ENV%

      - name: Verify Miniconda
        shell: cmd
        run: C:\Miniconda3\Scripts\conda.exe --version

      - name: Create conda env for minian
        shell: cmd
        run: |
          C:\Miniconda3\Scripts\conda.exe env remove -n minian_release -y || echo "no old env"
          C:\Miniconda3\Scripts\conda.exe create -n minian_release python=3.8 -y

      - name: Install minian deps with conda-forge
        shell: cmd
        run: |
          C:\Miniconda3\Scripts\conda.exe install -n minian_release -c conda-forge h5py pyinstaller minian -y
          C:\Miniconda3\Scripts\conda.exe run -n minian_release python -c "import minian; print('MiniAn version:', getattr(minian,'__version__','?'))"

      - name: Clean old dist/build 
        shell: cmd
        working-directory: Deploy
        run: |
            if exist dist rmdir /s /q dist
            if exist build rmdir /s /q build

      - name: Build minian exe
        shell: cmd
        working-directory: Deploy
        run: |
            C:\Miniconda3\Scripts\conda.exe run -n minian_release pyinstaller --clean --noconfirm pack_minian_run.spec
            echo === DIST TREE ===
            dir /s /b dist

      - name: Zip onedir output with build-info
        shell: cmd
        working-directory: Deploy
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          rem Locate the onedir app folder under dist
          set "APPDIR="
          for /d %%D in (dist\*) do ( set "APPDIR=%%D" & goto :found )
          :found
          if not defined APPDIR ( echo ERROR: no onedir folder found in Deploy\dist & exit /b 1 )

          rem Write build-info into the app folder (included in the zip)
          echo Version: %VERSION%> "%APPDIR%\build-info.txt"
          echo Commit: %GIT_SHA%>> "%APPDIR%\build-info.txt"
          echo Date: %DATE% %TIME%>> "%APPDIR%\build-info.txt"

          set "ZIPNAME=minian-%VERSION%.zip"

          rem One-line Python (no backslashes/newlines)
          ..\venv\Scripts\python -c "import os,zipfile; a=r'%APPDIR%'; zf=r'%ZIPNAME%'; assert os.path.isdir(a), 'no APPDIR: '+a; z=zipfile.ZipFile(zf,'w',zipfile.ZIP_DEFLATED); [z.write(os.path.join(r,f), os.path.relpath(os.path.join(r,f),a)) for r,_,fs in os.walk(a) for f in fs]; z.close()"
          echo Created zip: %ZIPNAME%

      - name: Show zip contents
        shell: cmd
        working-directory: Deploy
        run: |
          set "ZN=minian-%VERSION%.zip"
          if not exist "%ZN%" ( echo ERROR: zip not found & exit /b 1 )
          ..\venv\Scripts\python -c "import os,zipfile; zn=r'%ZN%'; z=zipfile.ZipFile(zn,'r'); n=z.namelist(); print('Entries in',zn,':',len(n)); [print(' ',x) for x in n[:50]]; z.close()"

      - name: SHA256 of release zip
        shell: cmd
        working-directory: Deploy
        run: |
          setlocal EnableDelayedExpansion
          set ZIP=minian-%VERSION%.zip
          if not exist "%ZIP%" ( echo ERROR: zip not found & exit /b 1 )
          for /f "usebackq skip=1 tokens=1" %%H in (`certutil -hashfile "%ZIP%" SHA256 ^| findstr /v /i "hash certutil"`) do (
            set HASH=%%H
            goto :got
          )
          :got
          echo !HASH!> minian-%VERSION%.zip.sha256
          type minian-%VERSION%.zip.sha256

      - name: Create GitHub Release (attach zip + checksum)
        uses: softprops/action-gh-release@v2
        with:
          name: minian ${{ env.VERSION }}
          body: |
            Automated minian release for tag ${{ github.ref_name }}.
            - Version: ${{ env.VERSION }}
            - Commit: ${{ github.sha }}
          files: |
            Deploy/minian-${{ env.VERSION }}.zip
            Deploy/minian-${{ env.VERSION }}.zip.sha256

      - name: Upload dist artifact (only on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: minian-dist-${{ env.VERSION }}
          path: Deploy/dist/**
          retention-days: 3
          compression-level: 1
